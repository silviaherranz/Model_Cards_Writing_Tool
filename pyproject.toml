[project]
[tool.ruff]
line-length = 79

[tool.ruff.lint]
select = [
    "ALL",
]
ignore = [
  "D105", # No docstring needed for magic methods
  "D107", # No docstring needed in __init__
	"D212", # Incompatible with D213, which is our preferred style for multiline docstrings
	"Q003", # Do not change quotation marks to avoid escaping
	"PLC0414", # Allow explicit re-exports
	"S101", # Assert is allowed
	"TID252", # Relative imports allowed
	"ANN201",
	"ANN001",
]
# Style error codes not managed by Ruff
external = ["WPS"]

[tool.ruff.lint.per-file-ignores]
"asv_benchmarks/**.py" = [
  "ARG001", # Some unused args are needed for parameterized tests
  "ARG002", # Some unused args are needed for parameterized tests
]
"plot_*.py" = [
	"ANN", # No type hints in examples
	"ARG001", # Some unused args are needed
	"B018", # Single object expressions are not useless in examples (they display the object)
	"D205", # Examples do not have a blank line in docstring
	"D415", # First line in examples does not end with period
  "E402", # Allow imports in the middle of the file
	"ERA001", # Commented code may be useful for the reader
  "PLW0603", # Globals are sometimes useful in examples
	"S310", # URLs in examples have been validated
	"T201", # Print allowed in examples
  "TC001", # We do not need to use TYPE_CHECKING blocks in example, for clarity
  "TC002", # We do not need to use TYPE_CHECKING blocks in example, for clarity
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"matplotlib.pyplot.axes".msg = "Use Matplotlib object-oriented API instead."
"matplotlib.pyplot.gca".msg = "Use Matplotlib object-oriented API instead."
"matplotlib.pyplot.gcf".msg = "Use Matplotlib object-oriented API instead."
"matplotlib.pyplot.legend".msg = "Use Matplotlib object-oriented API instead."
"matplotlib.pyplot.plot".msg = "Use Matplotlib object-oriented API instead."
"matplotlib.pyplot.scatter".msg = "Use Matplotlib object-oriented API instead."
"matplotlib.pyplot.subplot".msg = "Use Matplotlib object-oriented API instead."
"matplotlib.pyplot.suptitle".msg = "Use Matplotlib object-oriented API instead."
"matplotlib.pyplot.tight_layout".msg = "Use Matplotlib object-oriented API instead."
"matplotlib.pyplot.title".msg = "Use Matplotlib object-oriented API instead."
"matplotlib.pyplot.xaxis".msg = "Use Matplotlib object-oriented API instead."
"matplotlib.pyplot.xlim".msg = "Use Matplotlib object-oriented API instead."
"matplotlib.pyplot.yaxis".msg = "Use Matplotlib object-oriented API instead."
"matplotlib.pyplot.ylim".msg = "Use Matplotlib object-oriented API instead."

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["X", "y"]

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.pylint]
max-args = 7

[tool.setuptools.packages.find]
include = ["skfda*"]

[tool.setuptools.dynamic]
version = {attr = "skfda.__version__"}
